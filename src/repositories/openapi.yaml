openapi: 3.0.1
info:
  title: 書籍管理システム API仕様
  description: 書籍管理システムのAPI仕様書です。
  version: v0.1
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: Book
  description: 書籍情報
- name: Rental
  description: レンタル情報
- name: RentalUser
  description: レンタルユーザ情報
paths:
  /user/{userId}:
    put:
      tags:
      - RentalUser
      summary: レンタルユーザ情報更新API
      operationId: update
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RentalUserUpdateForm'
        required: true
      responses:
        "200":
          description: 成功
  /user:
    post:
      tags:
      - RentalUser
      summary: レンタルユーザ情報登録API
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RentalUserRegisterForm'
        required: true
      responses:
        "200":
          description: 成功
  /rental:
    post:
      tags:
      - Rental
      summary: レンタル情報登録API
      operationId: register_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RentalRegisterForm'
        required: true
      responses:
        "200":
          description: 成功
  /book:
    get:
      tags:
      - Book
      summary: 書籍情報検索API
      operationId: search
      parameters:
      - name: form
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/BookSearchForm'
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: 成功
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageBookSearchResponse'
    post:
      tags:
      - Book
      summary: 書籍情報登録API
      operationId: register_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRegisterForm'
        required: true
      responses:
        "200":
          description: 成功
  /book/{bookId}:
    get:
      tags:
      - Book
      summary: 書籍情報詳細取得API
      operationId: detail
      parameters:
      - name: bookId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: 成功
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BookDetailResponse'
components:
  schemas:
    RentalUserUpdateForm:
      type: object
      properties:
        phone:
          type: string
        mail:
          type: string
    RentalUserRegisterForm:
      type: object
      properties:
        name:
          type: string
        phone:
          type: string
        mail:
          type: string
    RentalRegisterForm:
      type: object
      properties:
        bookId:
          type: integer
          format: int32
        userId:
          type: integer
          format: int32
        deadline:
          type: string
          format: date-time
    BookRegisterForm:
      type: object
      properties:
        name:
          type: string
        author:
          type: string
    BookSearchForm:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        author:
          type: string
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    BookSearchResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        author:
          type: string
    PageBookSearchResponse:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/BookSearchResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    BookDetailRentalResponse:
      type: object
      properties:
        userId:
          type: string
        rentedAt:
          type: string
          format: date-time
    BookDetailResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        author:
          type: string
        rentals:
          type: array
          items:
            $ref: '#/components/schemas/BookDetailRentalResponse'
